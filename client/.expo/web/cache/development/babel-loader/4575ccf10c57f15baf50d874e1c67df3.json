{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { ThemeProvider } from \"./theming\";\nimport { Provider as SettingsProvider } from \"./settings\";\nimport MaterialCommunityIcon from \"../components/MaterialCommunityIcon\";\nimport PortalHost from \"../components/Portal/PortalHost\";\n\nvar Provider = function (_React$Component) {\n  _inherits(Provider, _React$Component);\n\n  var _super = _createSuper(Provider);\n\n  function Provider() {\n    _classCallCheck(this, Provider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Provider, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(PortalHost, null, React.createElement(SettingsProvider, {\n        value: this.props.settings || {\n          icon: MaterialCommunityIcon\n        }\n      }, React.createElement(ThemeProvider, {\n        theme: this.props.theme\n      }, this.props.children)));\n    }\n  }]);\n\n  return Provider;\n}(React.Component);\n\nexport { Provider as default };","map":{"version":3,"sources":["Provider.tsx"],"names":["Provider","React","render","icon","MaterialCommunityIcon","theme"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA;AACA,SAASA,QAAQ,IAAjB,gBAAA;AACA,OAAA,qBAAA;AACA,OAAA,UAAA;;IASe,Q;;;;;;;;;;;;;WACbE,kBAAS;AACP,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AACE,QAAA,KAAK,EAAE,KAAA,KAAA,CAAA,QAAA,IAAuB;AAAEC,UAAAA,IAAI,EAAEC;AAAR;AADhC,OAAA,EAGE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,QAAA,KAAK,EAAE,KAAA,KAAA,CAAWC;AAAjC,OAAA,EACG,KAAA,KAAA,CANT,QAKM,CAHF,CADF,CADF;AAWD;;;;EAbmCJ,KAAK,CAA5B,S;;SAAA,Q","sourcesContent":["import * as React from 'react';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport { Theme } from '../types';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: Theme;\n  settings?: Settings;\n};\n\nexport default class Provider extends React.Component<Props> {\n  render() {\n    return (\n      <PortalHost>\n        <SettingsProvider\n          value={this.props.settings || { icon: MaterialCommunityIcon }}\n        >\n          <ThemeProvider theme={this.props.theme}>\n            {this.props.children}\n          </ThemeProvider>\n        </SettingsProvider>\n      </PortalHost>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}